project(xava C CXX)
cmake_minimum_required(VERSION 3.1)

# default build configuration, adjust this to your liking
option(SHMEM "SHMEM" OFF)
option(SDL2 "SDL2" ON)
option(X11 "X11" ON)
option(WAYLAND "WAYLAND" OFF)
if(WAYLAND) # Wayland REQUIRES SHMEM as a dependency
	set(SHMEM ON)
endif()
option(ALSA "ALSA" ON)
option(PULSEAUDIO "PULSEAUDIO" ON)
option(SNDIO "SNDIO" ON)
option(PORTAUDIO "PORTAUDIO" ON)

# Wayland protocols default directory
set(WL_PROT_DIR "/usr/share/wayland-protocols")

# Fix pkg-config for cross-builds (such as MinGW on ArchLinux)
if(CMAKE_FIND_ROOT_PATH)
    set(CMAKE_SYSROOT "${CMAKE_FIND_ROOT_PATH}")

    set(ENV{PKG_CONFIG_DIR} "")
    set(ENV{PKG_CONFIG_LIBDIR} "${CMAKE_SYSROOT}/lib/pkgconfig:${CMAKE_SYSROOT}/share/pkgconfig")
    set(ENV{PKG_CONFIG_SYSROOT_DIR} ${CMAKE_SYSROOT})
endif()

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Debug)
endif()

if(MINGW)
	set(CMAKE_FIND_LIBRARY_SUFFIXES .dll ${CMAKE_FIND_LIBRARY_SUFFIXES})
endif()

set(CMAKE_C_FLAGS "-Wall")
set(CMAKE_C_FLAGS_DEBUG "-g -DDEBUG")
set(CMAKE_C_FLAGS_RELEASE "-O3")
set(CMAKE_CXX_FLAGS "-Wall")
set(CMAKE_CXX_FLAGS_DEBUG "-g -DDEBUG")
set(CMAKE_CXX_FLAGS_RELEASE "-O3")

set(CMAKE_C_STANDARD 11)
set(xava_VERSION_MAJOR 0)
set(xava_VERSION_MINOR 6)
set(xava_VERSION_PATCH 3)
set(xava_VERSION_TWEAK 1)

set(xava_VERSION "${xava_VERSION_MAJOR}.${xava_VERSION_MINOR}.${xava_VERSION_PATCH}.${xava_VERSION_TWEAK}")

add_definitions(-DPACKAGE="xava" -DVERSION="${xava_VERSION}")
add_definitions(-DPREFIX="${CMAKE_INSTALL_PREFIX}")

find_package(PkgConfig REQUIRED)

# iniparser
find_library(INIPARSER iniparser HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
if(NOT INIPARSER)
	message(STATUS "iniparser not found on system, building from source.")
	if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/.git)
		execute_process(COMMAND git submodule update --init)
		add_library(iniparser
				lib/iniparser/src/dictionary.c
				lib/iniparser/src/iniparser.c)
		add_definitions(-DINIPARSER)
	else()
		message(FATAL_ERROR "Cannot build iniparser from source since the project \
is not being built inside a git repository.\nIf you want iniparser \
to be built automatically, clone this repository instead of downloading it.")
	endif()
else()
	# certain distros like ubuntu put iniparser in a subdirectory "iniparser"
	# this is just a non-destructive way to accomidate that case

	find_file(INIPARSER_INCLUDE_FILE iniparser/iniparser.h ${CMAKE_SYSTEM_INCLUDE_PATH})
	if(NOT ${INIPARSER_INCLUDE_FILE} STREQUAL "INIPARSER_INCLUDE_FILE-NOTFOUND")
		string(REGEX REPLACE "iniparser.h" "" INIPARSER_INCLUDE_DIR ${INIPARSER_INCLUDE_FILE})
		list(APPEND INCLUDE_DIRS ${INIPARSER_INCLUDE_DIR})
	endif()
endif()

if(DEFINE_LEGACYINIPARSER AND INIPARSER)
	add_definitions(-DLEGACYINIPARSER)
endif()

# math lib
find_library(MATH_LIB m HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
if(NOT MATH_LIB)
  message(FATAL_ERROR "math library not found")
endif()

# pthread
find_library(THREAD_LIB pthread HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
if(NOT THREAD_LIB)
	message(FATAL_ERROR "pthread library not found")
endif()

# fftw3
pkg_check_modules(FFTW3 REQUIRED fftw3)
list(APPEND INCLUDE_DIRS "${FFTW3_INCLUDE_DIRS}")
list(APPEND LINK_DIRS "${FFTW3_LIBRARY_DIRS}")


# Optional features
set(ADDITIONAL_SOURCES "")
set(ADDITIONAL_LIBRARIES "")

# shmem
if(SHMEM)
	add_definitions(-DSHMEM)
	list(APPEND ADDITIONAL_LIBRARIES "-lrt")
	list(APPEND ADDITIONAL_SOURCES "src/input/shmem.c")
endif()

# OS-Specific inclusions
if(NOT (MSYS OR MINGW OR MSVC))
	message(STATUS "Not a Windows platform, can use POSIX now!")
	list(APPEND ADDITIONAL_SOURCES "src/input/fifo.c")
endif()

# SDL2
if(SDL2)
	pkg_check_modules(SDL2 QUIET sdl2)
	if(SDL2_FOUND)
		list(APPEND ADDITIONAL_SOURCES "src/output/graphical_sdl.c")
		list(APPEND INCLUDE_DIRS "${SDL2_INCLUDE_DIRS}")
		list(APPEND LINK_DIRS "${SDL2_LIBRARY_DIRS}")
		list(APPEND ADDITIONAL_LIBRARIES "${SDL2_LIBRARIES}")
		add_definitions(-DSDL)
	else()
		message(STATUS "SDL2 library not found")
	endif()
endif()

# Wayland
if(WAYLAND)
	pkg_check_modules(WAYLAND QUIET egl wayland-client wayland-egl egl gl)
	if(WAYLAND_FOUND)
		# Hacky way to deal with wayland-scanner (but will be used for nw)
		execute_process(COMMAND wayland-scanner client-header 
			"${WL_PROT_DIR}/stable/xdg-shell/xdg-shell.xml"
			"${CMAKE_CURRENT_LIST_DIR}/src/output/xdg-shell-client-protocol.h")
		execute_process(COMMAND wayland-scanner client-header
			"${CMAKE_CURRENT_LIST_DIR}/assets/linux/wayland/protocols/wlr-layer-shell-unstable-v1.xml"
			"${CMAKE_CURRENT_LIST_DIR}/src/output/wlr-layer-shell-unstable-v1-client-protocol.h")
		execute_process(COMMAND wayland-scanner private-code
			"${CMAKE_CURRENT_LIST_DIR}/assets/linux/wayland/protocols/wlr-layer-shell-unstable-v1.xml"
			"${CMAKE_CURRENT_LIST_DIR}/src/output/wlr-layer-shell-unstable-v1-client-protocol.c")
		list(APPEND ADDITIONAL_SOURCES "src/output/wlr-layer-shell-unstable-v1-client-protocol.c")
		execute_process(COMMAND wayland-scanner client-header
			"${CMAKE_CURRENT_LIST_DIR}/assets/linux/wayland/protocols/wlr-output-management-unstable-v1.xml"
			"${CMAKE_CURRENT_LIST_DIR}/src/output/wlr-output-managment-unstable-v1.h")
		execute_process(COMMAND wayland-scanner private-code
			"${CMAKE_CURRENT_LIST_DIR}/assets/linux/wayland/protocols/wlr-output-management-unstable-v1.xml"
			"${CMAKE_CURRENT_LIST_DIR}/src/output/wlr-output-managment-unstable-v1.c")
		list(APPEND ADDITIONAL_SOURCES "src/output/wlr-output-managment-unstable-v1.c")

		list(APPEND ADDITIONAL_SOURCES "src/output/graphical_wayland.c")
		list(APPEND INCLUDE_DIRS "${WAYLAND_INCLUDE_DIRS}")
		list(APPEND LINK_DIRS "${WAYLAND_LIBRARY_DIRS}")
		list(APPEND ADDITIONAL_LIBRARIES "${WAYLAND_LIBRARIES}")
		add_definitions(-DWAYLAND)
	else()
		message(STATUS "Wayland libraries not found")
	endif()
endif()

# Xorg
if(X11)
	if(APPLE)
		include(FindX11)
		if(X11_FOUND)
			add_definitions(-DXLIB)
			list(APPEND ADDITIONAL_SOURCES "src/output/graphical_x.c")
			list(APPEND INCLUDE_DIRS "${X11_INCLUDE_DIR}" "${X11_Xfixes_INCLUDE_PATH}" "${X11_Xrandr_INCLUDE_PATH}")
			list(APPEND LINK_DIRS "${X11_INCLUDE_DIR}" "${X11_Xfixes_INCLUDE_PATH}" "${X11_Xrandr_INCLUDE_PATH}")
			list(APPEND ADDITIONAL_LIBRARIES "${X11_LIBRARIES}" "${X11_Xfixes_LIB}" "${X11_Xrandr_LIB}")
		else()
			message(STATUS "X11, Xrandr and/or Xfixes library not found")
		endif()
	else()
		pkg_check_modules(X11 QUIET x11 xfixes xrandr)
		if(X11_FOUND)
			add_definitions(-DXLIB)
			list(APPEND ADDITIONAL_SOURCES "src/output/graphical_x.c")
			list(APPEND INCLUDE_DIRS "${X11_INCLUDE_DIRS}")
			list(APPEND LINK_DIRS "${X11_LIBRARY_DIRS}")
			list(APPEND ADDITIONAL_LIBRARIES "${X11_LIBRARIES}")
			
			# GLX
			pkg_check_modules(GL QUIET gl glew xrender)
			if(GL_FOUND)
				add_definitions(-DGLX -DGL)
				list(APPEND INCLUDE_DIRS "${GL_INCLUDE_DIRS}")
				list(APPEND LINK_DIRS "${GL_LIBRARY_DIRS}")
				list(APPEND ADDITIONAL_LIBRARIES "${GL_LIBRARIES}")
			else()
				message(STATUS "GL and or Xrender library not found")
			endif()
		else()
			message(STATUS "X11, Xrandr and/or Xfixes library not found")
		endif()
	endif()
endif()


# winapi
if(MSYS OR MINGW OR MSVC)
	find_library(GDI_LIB gdi32 HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
	if(GDI_LIB)
		find_library(WGL_LIB opengl32 HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
		if(WGL_LIB)
			find_library(GLU_LIB glu32 HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
			if(GLU_LIB)
				find_library(DWM_LIB dwmapi HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
				if(DWM_LIB)
					find_library(GLEW_LIB glew32)
					if(GLEW_LIB)
						add_definitions(-DWIN -DGL)
						list(APPEND ADDITIONAL_SOURCES "src/output/graphical_win.c")
						list(APPEND ADDITIONAL_SOURCES "src/input/wasapi.cpp")
						list(APPEND ADDITIONAL_LIBRARIES "-lgdi32")
						list(APPEND ADDITIONAL_LIBRARIES "-lopengl32")
						list(APPEND ADDITIONAL_LIBRARIES "-lglu32")
						list(APPEND ADDITIONAL_LIBRARIES "-lglew32")
						list(APPEND ADDITIONAL_LIBRARIES "-ldwmapi")
					else()
						message("GLEW library not found")
					endif()
				else()
					message("DWMAPI library not found")
				endif()
			else()
				message("GLU library not found")
			endif()
		else()
			message("openGL library not found")
		endif()
	else()
		message(STATUS "GDI library not found")
	endif()
	
	if(CMAKE_BUILD_TYPE STREQUAL "Release")
		message(STATUS "Since release build, console is being disabled")
		SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${GCC_COVERAGE_LINK_FLAGS} -mwindows")

		# Prepare NSI file for compilation
		configure_file("assets/windows/xava.nsi.template" "xava.nsi" NEWLINE_STYLE CRLF)
	endif()
endif()

# alsa
if(ALSA)
	pkg_check_modules(ALSA QUIET alsa)
	if(ALSA_FOUND)
		add_definitions(-DALSA)
		list(APPEND INCLUDE_DIRS "${ALSA_INCLUDE_DIRS}")
		list(APPEND LINK_DIRS "${ALSA_LIBRARY_DIRS}")
		list(APPEND ADDITIONAL_SOURCES "src/input/alsa.c")
		list(APPEND ADDITIONAL_LIBRARIES "${ALSA_LIBRARIES}")
	else()
		message(STATUS "alsa library not found")
	endif()
endif()

# pulseaudio
if(PULSEAUDIO)
	pkg_check_modules(PULSEAUDIO QUIET libpulse libpulse-simple)
	if(PULSEAUDIO_FOUND)
		add_definitions(-DPULSE)
		list(APPEND INCLUDE_DIRS "${PULSEAUDIO_INCLUDE_DIRS}")
		list(APPEND LINK_DIRS "${PULSEAUDIO_LIBRARY_DIRS}")
		list(APPEND ADDITIONAL_SOURCES "src/input/pulse.c")
		list(APPEND ADDITIONAL_LIBRARIES "${PULSEAUDIO_LIBRARIES}")
	else()
		message(STATUS "pulseaudio library not found")
	endif()
endif()

# sndio
if(SNDIO)
	find_library(SNDIO_LIB sndio HINTS ${CMAKE_C_IMPLICIT_LINK_DIRECTORIES})
	if(SNDIO_LIB)
		add_definitions(-DSNDIO)
		list(APPEND ADDITIONAL_SOURCES "src/input/sndio.c")
		list(APPEND ADDITIONAL_LIBRARIES "-lsndio")
	else()
		message(STATUS "sndio library not found")
	endif()
endif()

# portaudio
if(PORTAUDIO)
	pkg_check_modules(PORTAUDIO QUIET portaudio-2.0)
	if(PORTAUDIO_FOUND)
		add_definitions(-DPORTAUDIO)
		list(APPEND INCLUDE_DIRS "${PORTAUDIO_INCLUDE_DIRS}")
		list(APPEND LINK_DIRS "${PORTAUDIO_LIBRARY_DIRS}")
		list(APPEND ADDITIONAL_SOURCES "src/input/portaudio.c")
		list(APPEND ADDITIONAL_LIBRARIES "${PORTAUDIO_LIBRARIES}")
	else()
		message(STATUS "portaudio library not found")
	endif()
endif()

if((UNIX AND NOT APPLE) OR (MSYS OR MINGW OR MSVC))
	list(APPEND ADDITIONAL_SOURCES "src/misc/inode_watcher.c")
endif()

# Shitty workaround that doesnt work for BSD, Minix or anything with any amount of POSIX compatibility
# Blame: https://stackoverflow.com/questions/9160335/os-specific-instructions-in-cmake-how-to
# Also CMAKE_SYSTEM_NAME doesn't work, so I've tried my options. 
# Please fix this whoever has time and reads this.
if(UNIX AND NOT APPLE)
	# Add proper version info to the desktop shortcut file
	configure_file("assets/linux/xava.desktop.template" "xava.desktop" NEWLINE_STYLE UNIX)
endif()

# Build executable
add_executable(
	xava
	${ADDITIONAL_SOURCES}
	src/output/graphical.c
	src/shared.c
	src/config.c
	src/xava.c
)

include_directories(${INCLUDE_DIRS})
link_directories(${LINK_DIRS})

# Link executable
target_link_libraries(xava ${ADDITIONAL_LIBRARIES} m ${FFTW3_LIBRARIES} pthread iniparser)

# Install
install (TARGETS xava DESTINATION bin)
install (FILES LICENSE DESTINATION share/licenses/xava)
install (FILES example_files/config RENAME config.example DESTINATION share/xava)
install (FILES assets/opengl/shaders/default.vert DESTINATION share/xava/opengl/shaders)
install (FILES assets/opengl/shaders/default.frag DESTINATION share/xava/opengl/shaders)
if(UNIX AND NOT APPLE)
    install (FILES ${CMAKE_BINARY_DIR}/xava.desktop DESTINATION share/applications)
    install (FILES assets/linux/xava.svg DESTINATION share/icons/hicolor/scalable/apps)
endif()
